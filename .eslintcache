[{"/Users/chrissanchez/Desktop/Road to React/hacker-stories/src/reportWebVitals.js":"1","/Users/chrissanchez/Desktop/Road to React/hacker-stories/src/App.js":"2"},{"size":362,"mtime":1606850048816,"results":"3","hashOfConfig":"4"},{"size":3591,"mtime":1609962519011,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13oaahn",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/chrissanchez/Desktop/Road to React/hacker-stories/src/reportWebVitals.js",[],"/Users/chrissanchez/Desktop/Road to React/hacker-stories/src/App.js",["11"],"import \"./App.css\";\nimport React from \"react\";\n\nconst API_ENDPOINT = \"https://hn.algolia.com/api/v1/search?query=\";\n\nconst useSemiPersistentState = (key, initialState) => {\n  const [value, setValue] = React.useState(\n    localStorage.getItem(key) || initialState\n  );\n  React.useEffect(() => {\n    localStorage.setItem(key, value);\n  }, [value, key]);\n  return [value, setValue];\n};\nconst storiesReducer = (state, action) => {\n  switch (action.type) {\n    case \"STORIES_FETCH_INIT\":\n      return { ...state, isLoading: true, isError: false };\n    case \"STORIES_FETCH_SUCCESS\":\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload,\n      };\n    case \"STORIES_FETCH_FAILURE\":\n      return { ...state, isLoading: false, isError: true };\n    case \"REMOVE_STORY\":\n      return {\n        ...state,\n        data: state.data.filter(\n          (story) => action.payload.objectID !== story.objectID\n        ),\n      };\n    default:\n      throw new Error();\n  }\n};\nconst App = () => {\n  const [searchTerm, setSearchTerm] = useSemiPersistentState(\"search\", \"React\");\n  const [stories, dispatchStories] = React.useReducer(storiesReducer, {\n    data: [],\n    isLoading: false,\n    isError: false,\n  });\n\n  React.useEffect(() => {\n    if (!searchTerm) return;\n    dispatchStories({ type: \"STORIES_FETCH_INIT\" });\n    fetch(`${API_ENDPOINT}${searchTerm}`)\n      .then((r) => r.json())\n      .then((result) => {\n        dispatchStories({\n          type: \"STORIES_FETCH_SUCCESS\",\n          payload: result.hits,\n        });\n      })\n      .catch(() => dispatchStories({ type: \"STORIES_FETCH_FAILURE\" }));\n  }, [searchTerm]);\n\n  const handleRemoveStory = (item) => {\n    dispatchStories({ type: \"REMOVE_STORY\", payload: item });\n  };\n  const handleSearch = (e) => {\n    setSearchTerm(e.target.value);\n    // localStorage.setItem(\"search\", e.target.value);\n  };\n  const searchedStories = stories.data.filter((story) =>\n    story.title.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n  return (\n    <div>\n      <h1>My Hacker Stories</h1>\n      <InputWithLabel\n        id=\"search\"\n        search={searchTerm}\n        isFocused\n        onInputChange={handleSearch}\n      >\n        <strong>Search:</strong>\n      </InputWithLabel>\n      <hr />\n      {stories.isError && <p> Something went wrong...</p>}\n      {stories.isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        <List list={stories.data} onRemoveItem={handleRemoveStory} />\n      )}\n    </div>\n  );\n};\n\nconst List = ({ list, onRemoveItem }) =>\n  list.map((item) => (\n    <Item key={item.objectID} item={item} onRemoveItem={onRemoveItem} />\n  ));\n\nconst Item = ({ item, onRemoveItem }) => (\n  <div>\n    <span>\n      <a href={item.url}>{item.title}</a>\n    </span>\n    <span>{item.author}</span>\n    <span>{item.num_comments}</span>\n    <span>{item.points}</span>\n    <span>\n      <button type=\"button\" onClick={() => onRemoveItem(item)}>\n        {/* <button type=\"button\" onClick={onRemoveItem.bind(null, item)}> */}\n        Dismiss\n      </button>\n    </span>\n  </div>\n);\n\nconst InputWithLabel = ({\n  id,\n  label,\n  value,\n  onInputChange,\n  type = \"text\",\n  isFocused,\n  children,\n}) => {\n  const inputRef = React.useRef();\n  React.useEffect(() => {\n    if (isFocused && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isFocused]);\n  return (\n    <>\n      <label htmlFor={id}>{children}</label>\n      <input\n        ref={inputRef}\n        id={id}\n        type={type}\n        value={value}\n        onChange={onInputChange}\n      />\n    </>\n  );\n};\nexport default App;\n",{"ruleId":"12","severity":1,"message":"13","line":68,"column":9,"nodeType":"14","messageId":"15","endLine":68,"endColumn":24},"no-unused-vars","'searchedStories' is assigned a value but never used.","Identifier","unusedVar"]